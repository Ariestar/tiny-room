"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@r4ai+remark-callout@0.6.2";
exports.ids = ["vendor-chunks/@r4ai+remark-callout@0.6.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _plugin_js__WEBPACK_IMPORTED_MODULE_0__.remarkCallout),\n/* harmony export */   defaultOptions: () => (/* reexport safe */ _plugin_js__WEBPACK_IMPORTED_MODULE_0__.defaultOptions),\n/* harmony export */   remarkCallout: () => (/* reexport safe */ _plugin_js__WEBPACK_IMPORTED_MODULE_0__.remarkCallout)\n/* harmony export */ });\n/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.js */ \"(rsc)/./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/plugin.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHI0YWkrcmVtYXJrLWNhbGxvdXRAMC42LjIvbm9kZV9tb2R1bGVzL0ByNGFpL3JlbWFyay1jYWxsb3V0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RiIsInNvdXJjZXMiOlsiRDpcXENvZGluZ1xcVGlueSBSb29tXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAcjRhaStyZW1hcmstY2FsbG91dEAwLjYuMlxcbm9kZV9tb2R1bGVzXFxAcjRhaVxccmVtYXJrLWNhbGxvdXRcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHRPcHRpb25zLCByZW1hcmtDYWxsb3V0LCByZW1hcmtDYWxsb3V0IGFzIGRlZmF1bHQsIH0gZnJvbSBcIi4vcGx1Z2luLmpzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/plugin.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/plugin.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions),\n/* harmony export */   formatForAttribute: () => (/* binding */ formatForAttribute),\n/* harmony export */   parseCallout: () => (/* binding */ parseCallout),\n/* harmony export */   remarkCallout: () => (/* binding */ remarkCallout),\n/* harmony export */   toHtml: () => (/* binding */ toHtml)\n/* harmony export */ });\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/.pnpm/defu@6.1.4/node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n\n\nconst defaultOptions = {\n    root: (callout) => ({\n        tagName: callout.isFoldable ? \"details\" : \"div\",\n        properties: {\n            dataCallout: true,\n            dataCalloutType: formatForAttribute(callout.type),\n            open: callout.defaultFolded === undefined ? false : !callout.defaultFolded,\n        },\n    }),\n    title: (callout) => ({\n        tagName: callout.isFoldable ? \"summary\" : \"div\",\n        properties: {\n            dataCalloutTitle: true,\n        },\n    }),\n    titleInner: (callout, options) => options.icon(callout) == null && options.foldIcon(callout) == null\n        ? undefined\n        : {\n            tagName: \"div\",\n            properties: {\n                dataCalloutTitleInner: true,\n            },\n        },\n    icon: () => undefined,\n    foldIcon: () => undefined,\n    body: () => ({\n        tagName: \"div\",\n        properties: {\n            dataCalloutBody: true,\n        },\n    }),\n    callouts: null,\n    onUnknownCallout: () => undefined,\n};\nconst initOptions = (options) => {\n    const defaultedOptions = (0,defu__WEBPACK_IMPORTED_MODULE_0__.defu)(options, defaultOptions);\n    return Object.fromEntries(Object.entries(defaultedOptions).map(([key, value]) => {\n        if ([\"root\", \"title\", \"titleInner\", \"body\", \"icon\", \"foldIcon\"].includes(key) &&\n            typeof value !== \"function\") {\n            return [key, () => value];\n        }\n        return [key, value];\n    }));\n};\n/**\n * A remark plugin to parse callout syntax.\n */\nconst remarkCallout = (_options) => {\n    const options = initOptions(_options);\n    return (tree, file) => {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, \"blockquote\", (node) => {\n            const paragraphNode = node.children.at(0);\n            if (paragraphNode == null || paragraphNode.type !== \"paragraph\")\n                return;\n            // Skip if the first line is empty\n            if (node.position?.start.line !== paragraphNode.position?.start.line) {\n                return;\n            }\n            const calloutTypeTextNode = paragraphNode.children.at(0);\n            if (calloutTypeTextNode == null || calloutTypeTextNode.type !== \"text\") {\n                return;\n            }\n            // Parse callout syntax\n            // e.g. \"[!note] title\"\n            const [calloutTypeText, ...calloutBodyText] = calloutTypeTextNode.value.split(\"\\n\");\n            const calloutData = parseCallout(calloutTypeText);\n            if (calloutData == null)\n                return;\n            if (options.callouts != null &&\n                !options.callouts.includes(calloutData.type)) {\n                const newCallout = options.onUnknownCallout(calloutData, file);\n                if (newCallout == null)\n                    return;\n                calloutData.type = newCallout.type;\n                calloutData.isFoldable = newCallout.isFoldable;\n                if (newCallout.title != null) {\n                    calloutData.title = newCallout.title;\n                }\n            }\n            // Generate callout root node\n            node.data = {\n                ...node.data,\n                hName: options.root(calloutData).tagName,\n                hProperties: {\n                    // @ts-ignore error TS2339: Property 'hProperties' does not exist on type 'BlockquoteData'.\n                    ...node.data?.hProperties,\n                    ...options.root(calloutData).properties,\n                },\n            };\n            // Generate callout body node\n            const bodyNode = [\n                {\n                    type: \"paragraph\",\n                    children: [],\n                },\n                ...node.children.splice(1),\n            ];\n            if (bodyNode[0].type !== \"paragraph\")\n                return; // type check\n            if (calloutBodyText.length > 0) {\n                bodyNode[0].children.push({\n                    type: \"text\",\n                    value: calloutBodyText.join(\"\\n\"),\n                });\n            }\n            // Generate callout title node\n            const titleNode = {\n                type: options.titleInner(calloutData, options) == null\n                    ? \"paragraph\"\n                    : \"blockquote\",\n                data: {\n                    hName: options.title(calloutData).tagName,\n                    hProperties: {\n                        ...options.title(calloutData).properties,\n                    },\n                },\n                children: [],\n            };\n            // Add icon node before the title text\n            const iconNode = options.icon(calloutData);\n            if (iconNode != null) {\n                titleNode.children.push(toHtml(iconNode));\n            }\n            // Add title text node\n            const titleInnerNode = {\n                type: \"paragraph\",\n                data: {\n                    hName: options.titleInner(calloutData, options)?.tagName,\n                    hProperties: options.titleInner(calloutData, options)?.properties,\n                },\n                children: [],\n            };\n            if (calloutData.title != null) {\n                titleInnerNode.children.push({\n                    type: \"text\",\n                    value: calloutData.title,\n                });\n            }\n            if (calloutBodyText.length <= 0) {\n                for (const [i, child] of paragraphNode.children.slice(1).entries()) {\n                    // Add all nodes after the break as callout body\n                    if (child.type === \"break\") {\n                        titleInnerNode.children.push(child); // Add the line break as callout title\n                        bodyNode[0].children.push(...paragraphNode.children.slice(i + 1 + 1)); // +1 for the callout type node, +1 for the break\n                        break;\n                    }\n                    // All inline node before the line break is added as callout title\n                    if (child.type !== \"text\") {\n                        titleInnerNode.children.push(child);\n                        continue;\n                    }\n                    // Add the part before the line break as callout title and the part after as callout body\n                    const [titleText, ...bodyTextLines] = child.value.split(\"\\n\");\n                    if (titleText) {\n                        // Add the part before the line break as callout title\n                        titleInnerNode.children.push({\n                            type: \"text\",\n                            value: titleText,\n                        });\n                    }\n                    if (bodyTextLines.length > 0) {\n                        // Add the part after the line break as callout body\n                        if (bodyNode[0].type !== \"paragraph\")\n                            return;\n                        bodyNode[0].children.push({\n                            type: \"text\",\n                            value: bodyTextLines.join(\"\\n\"),\n                        });\n                        // Add all nodes after the current node as callout body\n                        bodyNode[0].children.push(...paragraphNode.children.slice(i + 2));\n                        break;\n                    }\n                }\n            }\n            else {\n                // Add all nodes after the current node as callout body\n                bodyNode[0].children.push(...paragraphNode.children.slice(1));\n            }\n            if (titleNode.type === \"paragraph\")\n                titleNode.children.push(...titleInnerNode.children);\n            else\n                titleNode.children.push(titleInnerNode);\n            // Add fold icon node after the title text\n            const foldIconNode = options.foldIcon(calloutData);\n            if (foldIconNode != null) {\n                titleNode.children.push(toHtml(foldIconNode));\n            }\n            // Add body and title to callout root node children\n            node.children = [titleNode];\n            if (bodyNode.length > 1 || bodyNode[0].children.length > 0) {\n                node.children.push({\n                    type: \"blockquote\",\n                    data: {\n                        hName: options.body(calloutData).tagName,\n                        hProperties: {\n                            ...options.body(calloutData).properties,\n                        },\n                    },\n                    children: bodyNode,\n                });\n            }\n        });\n    };\n};\n/**\n * @example\n * ```\n * const callout = parseCallout(\"[!info]\");  // { type: \"info\", isFoldable: false, title: undefined }\n * const callout = parseCallout(\"[!info\");   // undefined\n * ```\n */\nconst parseCallout = (text) => {\n    if (text == null)\n        return;\n    const match = text.match(/^\\[!(?<type>[^\\]]+)?\\](?<isFoldable>[+-])?(?: (?<title>.*))?$/);\n    if (match?.groups?.type == null)\n        return undefined;\n    const callout = {\n        type: match.groups.type,\n        isFoldable: match.groups.isFoldable != null,\n    };\n    if (match.groups.isFoldable != null) {\n        callout.defaultFolded = match.groups.isFoldable === \"-\";\n    }\n    if (match.groups.title != null) {\n        callout.title = match.groups.title;\n    }\n    else {\n        callout.title = capitalize(callout.type);\n    }\n    return callout;\n};\nconst toHtml = (from) => {\n    if (typeof from === \"string\") {\n        return {\n            type: \"html\",\n            value: from,\n        };\n    }\n    if (typeof from.children === \"string\") {\n        return {\n            type: \"html\",\n            data: {\n                hName: from.tagName,\n                hProperties: from.properties,\n            },\n            value: from.children,\n        };\n    }\n    return {\n        type: \"html\",\n        data: {\n            hName: from.tagName,\n            hProperties: from.properties,\n            hChildren: from.children,\n        },\n        value: \"\",\n    };\n};\nfunction capitalize(word) {\n    if (word.length === 0) {\n        return word;\n    }\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\nfunction formatForAttribute(rawString) {\n    return rawString.replace(/\\s+/g, \"-\").toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@r4ai+remark-callout@0.6.2/node_modules/@r4ai/remark-callout/dist/plugin.js\n");

/***/ })

};
;