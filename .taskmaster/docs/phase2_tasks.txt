# Phase 2 Roadmap - Tiny Room Website

## 0. 前置决策 (Priority: high)
0.1 选定主项目代码基（Next.js tiny-room 或 Remix my-website）
0.2 统一包管理 & Lint / Style 规则

## 1. 信息架构 & 内容规划 (Priority: high)
1.1 绘制完整 Sitemap／页面流程图
1.2 定义各页面数据模型（TypeScript interface / Prisma schema）
1.3 更新路由表 + 顶部导航（routes.ts／Header.tsx）
1.4 抽取 Design Tokens（颜色、字体、间距）到 globals.scss / tokens.ts

## 2. 页面完善 (Priority: high)
### 2-A Project 页面
2-A.1 项目分类与筛选组件
2-A.2 详情数据：技术栈、截图、外链、角色
2-A.3 卡片 UI：Skeleton loading + Hover 动效
2-A.4 数据来源迁移至统一数据层（见任务 4）

### 2-B Gallery 页面
2-B.1 Masonry / 瀑布流布局实现
2-B.2 图片懒加载 + Lightbox 预览
2-B.3 分页或无限滚动
2-B.4 标签过滤（可选）

## 3. UI / 交互美化 (Priority: medium)
3.1 全站 Light / Dark 模式切换（CSS 变量 + prefers-color-scheme）
3.2 艺术元素：SVG 路径文字 / GSAP 或 Framer-motion 动效
3.3 细节优化：按钮 hover、滚动条、404 页、加载指示器

## 4. 数据更新 & CMS 功能 (Priority: high)
4.1 选型：Markdown + gray-matter 或 Headless CMS（Sanity / Strapi）
4.2 富文本编辑器集成（TipTap / Editor.js）
4.3 身份认证（Next-Auth JWT）
4.4 媒体上传（S3 / Cloudinary）
4.5 本地 CLI 同步脚本，支持离线写作后自动上传

## 5. 性能优化 (Priority: medium)
5.1 图片优化：懒加载 + WebP/AVIF + vite-plugin-imagemin
5.2 代码分割 & 按需加载（React.lazy / dynamic import）
5.3 HTTP/2 + brotli 压缩 & 缓存策略
5.4 Lighthouse 调优：FCP、CLS、TBT ≥ 90

## 6. SEO & OpenGraph (Priority: medium)
6.1 每页动态 Title / Description / Keywords
6.2 OpenGraph & Twitter Card 元数据
6.3 生成 sitemap.xml、robots.txt、RSS Feed
6.4 JSON-LD 结构化数据（Breadcrumb / Article）

## 7. 质量保障 (Priority: medium)
7.1 单元测试（Vitest / Jest）覆盖核心组件
7.2 E2E 测试（Playwright / Cypress）关键用户流程
7.3 GitHub Actions：Lint → Test → Build → Deploy
7.4 定期依赖升级 & 安全审计
