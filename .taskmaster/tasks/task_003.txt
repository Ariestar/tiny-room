# Task ID: 3
# Title: Implement User Authentication with NextAuth.js
# Status: done
# Dependencies: 1
# Priority: high
# Description: Set up NextAuth.js v5 for user authentication, including login, logout, and session management. Implement protected routes for the dashboard pages.
# Details:
1. Install `next-auth`.
2. Configure authentication providers (e.g., Credentials, GitHub).
3. Create API routes for authentication callbacks.
4. Implement middleware to protect dashboard routes.
5. Implement login and logout UI components.

# Test Strategy:
Test the login and logout flows with different authentication providers. Verify that protected routes are only accessible to authenticated users. Check session management and security.

# Subtasks:
## 1. Install and Configure NextAuth.js [done]
### Dependencies: None
### Description: Install the `next-auth` package and create the initial configuration file (`[...nextauth].js` or `.ts`) with basic settings.
### Details:
Install the `next-auth` package using npm or yarn. Create the `pages/api/auth/[...nextauth].js` file and configure the basic settings like `secret` and `jwt`.
<info added on 2025-07-02T03:31:01.725Z>
1. 依赖安装
   • 执行 `pnpm add next-auth` 安装核心库（NextAuth v5）。
   • 若出现类型提示，可后续安装 `@types/next-auth`（v5 已内置 TS 类型，通常无需）。

2. 环境变量准备（本地）
   • 在根目录 `.env.local` 添加：
     ```env
     NEXTAUTH_SECRET="<32-byte-random>"
     NEXTAUTH_URL="http://localhost:3000"
     ```
   • `NEXTAUTH_SECRET` 可使用 `openssl rand -base64 32` 生成；生产环境会放到 Vercel 环境变量。

3. API Route 创建（App Router 风格）
   • 路径：`src/app/api/auth/[...nextauth]/route.ts`（动态段必须三点展开）。
   • 内容：
     ```ts
     import NextAuth from "next-auth";
     import GitHub from "next-auth/providers/github"; // 先保留占位
     import Credentials from "next-auth/providers/credentials";

     export const authOptions = {
       secret: process.env.NEXTAUTH_SECRET,
       providers: [
         Credentials({
           name: "Credentials",
           credentials: {
             email: { label: "Email", type: "email" },
             password: { label: "Password", type: "password" },
           },
           async authorize(credentials) {
             // TODO: 后续实现真实验证（数据库）
             if (!credentials?.email) return null;
             return { id: "1", name: credentials.email, email: credentials.email };
           },
         }),
       ],
       session: { strategy: "jwt" },
       pages: { signIn: "/login" },
     } satisfies NextAuth.Config;

     const handler = NextAuth(authOptions);
     export { handler as GET, handler as POST };
     ```
   • 先仅保留 Credentials provider 验证 stub；GitHub Provider 在子任务 2 完善。

4. 添加 TypeScript 类型辅助（可选）
   • 新建 `src/types/next-auth.d.ts` 声明 module augment，未来扩展 session.user 字段。

5. 运行与验证
   • `pnpm dev` 启动，访问 `http://localhost:3000/api/auth/signin`，应看到 NextAuth 默认 Sign In 页面。
   • 尝试填写任何 email/password → 应返回 200 并创建 session cookie（stub）。

6. 待办 / 依赖
   • GitHub Provider 与真实数据库校验逻辑将在子任务 2 实现。
   • 路由保护 Middleware 见子任务 4。

完成标准
✔ `next-auth` 成功加载，/api/auth/signin 页面可访问。
✔ `.env.local` 含 SECRET 且 dev 服务器启动无报错。
✔ route.ts 通过 TypeScript 编译，ESLint 无 error。
</info added on 2025-07-02T03:31:01.725Z>
<info added on 2025-07-02T03:37:34.382Z>
【实施进度更新】

已完成 NextAuth.js 的基础安装与配置：

1. ✅ 安装依赖
   - 成功执行 `pnpm add next-auth` 安装了 NextAuth.js v4.24.11

2. ✅ 环境变量配置
   - 创建了 `.env.local` 文件
   - 设置了 `NEXTAUTH_SECRET` 和 `NEXTAUTH_URL`
   - 预留了 GitHub Provider 的配置项（子任务 2 中实现）

3. ✅ 类型定义
   - 创建了 `src/types/next-auth.d.ts` 类型声明文件
   - 扩展了 Session、User 和 JWT 类型，为后续自定义字段做准备

4. ✅ API 路由实现
   - 创建了 `src/app/api/auth/[...nextauth]/route.ts` 文件
   - 配置了 Credentials Provider 作为基础登录方式
   - 实现了临时验证逻辑（任意邮箱 + 固定密码 "password"）
   - 配置了 JWT 策略、会话时长、回调函数等
   - 解决了所有 TypeScript 类型错误

5. ✅ 开发服务器测试
   - 启动了 `pnpm dev` 服务器
   - 验证了 NextAuth 配置无语法错误，服务器正常启动

后续步骤（其他子任务）：
- 子任务 3.2：配置 GitHub Provider（OAuth 登录）
- 子任务 3.4：实现中间件保护 Dashboard 路由
- 子任务 3.5：创建登录/注销 UI 组件

完成标准检查：
✅ NextAuth 成功加载，无启动错误
✅ `.env.local` 包含必要的环境变量
✅ API 路由文件通过 TypeScript 编译，无 ESLint 错误
</info added on 2025-07-02T03:37:34.382Z>

## 2. Configure Authentication Providers [done]
### Dependencies: 3.1
### Description: Set up authentication providers such as Credentials provider for email/password login and GitHub provider for OAuth.
### Details:
Configure the Credentials provider with custom authentication logic. Set up the GitHub provider with client ID and client secret. Handle user creation and verification.
<info added on 2025-07-02T03:44:58.021Z>
**实施计划：配置认证提供者**

本子任务的目标是扩展认证功能，加入 GitHub OAuth 登录，并为后续数据库集成做准备。

1.  **环境变量配置 (GitHub)**
    *   在 `.env.local` 文件中，取消注释并填入 GitHub OAuth App 的凭据。
        ```env
        GITHUB_ID="your-github-client-id"
        GITHUB_SECRET="your-github-client-secret"
        ```
    *   **提醒**: 你需要去 GitHub Developer Settings 创建一个新的 OAuth Application 来获取这些值。回调 URL 应设为 `http://localhost:3000/api/auth/callback/github`。

2.  **更新 NextAuth 配置 (`route.ts`)**
    *   在 `src/app/api/auth/[...nextauth]/route.ts` 中，取消 `GitHub` provider 的注释。
    *   将 `process.env.GITHUB_ID` 和 `process.env.GITHUB_SECRET` 传入配置。

3.  **完善 Credentials Provider (占位)**
    *   当前 `authorize` 函数是硬编码的。我们将保留这个 stub，但会添加注释，明确指出这里将在后续任务中替换为数据库查询逻辑。

4.  **数据库适配器 (Prisma - 准备工作)**
    *   虽然本任务不完全实现数据库集成，但为了让 NextAuth 的 OAuth 流程（如自动创建用户）能够顺利工作，需要安装并配置 Prisma Adapter。
    *   执行 `pnpm add @auth/prisma-adapter` 和 `pnpm add -D prisma`。
    *   执行 `pnpm prisma init` 来创建 `prisma/schema.prisma` 文件。
    *   在 `schema.prisma` 中添加 NextAuth.js 所需的数据模型（User, Account, Session, VerificationToken）。
    *   在 `route.ts` 中导入 `PrismaAdapter` 并将其添加到 `authOptions` 中。

5.  **运行与验证**
    *   启动 `pnpm dev`。
    *   访问 `/api/auth/signin`，现在应该能看到 "Sign in with GitHub" 的按钮。
    *   点击按钮，应能跳转到 GitHub 授权页面。授权后，应能成功回调并创建 session。
    *   使用 postman 或类似工具测试 Credentials 登录，确保旧的 stub 逻辑仍然有效。

完成标准：
✔ GitHub Provider 成功配置，登录流程可以走通。
✔ Prisma Adapter 已安装并基础配置完成。
✔ `schema.prisma` 包含了 NextAuth 所需的全部模型。
✔ 启动开发服务器无报错。
✔ 新增的环境变量已在 `.env.local` 中正确配置。
</info added on 2025-07-02T03:44:58.021Z>

## 3. Create API Routes for Authentication Callbacks [done]
### Dependencies: 3.2
### Description: Implement API routes to handle authentication callbacks from providers and manage user sessions.
### Details:
Implement the `signIn`, `signOut`, `redirect`, `session`, and `error` callbacks in the `[...nextauth].js` file. Handle user data persistence and session management.
<info added on 2025-07-02T05:06:05.487Z>
**Implementation Plan: Verify and Expose User Sessions**

The core of this task is to verify the correctness of the authentication callbacks and establish a mechanism for our front-end application (whether server-side or client-side components) to easily obtain the session information of the currently logged-in user.

**1. Verify the `session` Callback:**
   - Check `src/app/api/auth/[...nextauth]/route.ts` for `callbacks.session`.
   - Ensure `user.id` is correctly attached to `session.user.id`.

**2. Create a Server-Side Session Retrieval Helper Function:**
   - Create a new file, e.g., `src/lib/auth.ts`.
   - Export a function within it, such as `export const getCurrentUser = async () => { const session = await getServerSession(authOptions); return session?.user; }`.
   - This will allow us to get the current user information in any server-side component with a single line of code.

**3. Use (or Prepare to Use) the Session in the Root Layout:**
   - It is not necessary to directly wrap the Provider in `layout.tsx` for now, as we will prioritize obtaining the session directly in the server-side component.

**4. Verification:**
   - Modify `src/app/page.tsx` to an `async` function (making it a server-side component).
   - In `page.tsx`, call `await getCurrentUser()`.
   - Based on the returned user information, render a welcome message or login prompt on the page.
   - After logging in via the browser, visit the homepage and verify that the welcome message is displayed correctly.
</info added on 2025-07-02T05:06:05.487Z>

## 4. Implement Middleware for Route Protection [done]
### Dependencies: 3.3
### Description: Create middleware to protect the dashboard routes, ensuring only authenticated users can access them.
### Details:
Create a `middleware.js` file to check user authentication status before accessing the dashboard routes. Redirect unauthenticated users to the login page.

## 5. Implement Login and Logout UI Components [done]
### Dependencies: 3.4
### Description: Design and implement login and logout UI components, including forms for email/password login and buttons for OAuth providers.
### Details:
Create login and logout components using React. Implement form validation for email/password login. Integrate with `signIn` and `signOut` functions from `next-auth/react`.

