{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Define Website Structure and Data Models",
        "description": "Define the website's structure, data models, and design tokens.",
        "details": "1. Create a complete Sitemap/page flow diagram to visualize the website's structure.\n2. Define data models for each page using TypeScript interfaces or Prisma schema to ensure data consistency.\n3. Update the routing table (routes.ts) and top navigation (Header.tsx) to reflect the new structure.\n4. Extract design tokens (colors, fonts, spacing) into global.scss or tokens.ts for consistent styling.",
        "testStrategy": "Verify the sitemap accurately reflects the intended website structure. Check that data models are correctly defined and used across the application. Ensure the routing table and navigation are updated and functional. Confirm that design tokens are correctly extracted and applied to the website's styling.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "绘制完整 Sitemap／页面流程图",
            "description": "创建网站的完整站点地图和页面流程图，以可视化方式展示网站结构",
            "details": "1. 分析网站需求和用户流程\n2. 确定所有页面和它们之间的关系\n3. 创建站点地图图表\n4. 创建用户流程图\n5. 记录页面之间的导航路径",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "定义各页面数据模型",
            "description": "使用 TypeScript 接口或 Prisma schema 定义各页面所需的数据模型",
            "details": "1. 分析每个页面所需的数据结构\n2. 为项目页面创建数据模型（Project 接口）\n3. 为图库页面创建数据模型（GalleryImage 接口）\n4. 为博客页面创建数据模型（BlogPost 接口，如适用）\n5. 创建用户数据模型（User 接口，用于认证）\n6. 创建网站设置数据模型（SiteSettings 接口）",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "更新路由表和顶部导航",
            "description": "更新路由表和顶部导航以反映新的网站结构",
            "details": "1. 根据站点地图更新 routes.ts 文件\n2. 添加新的路由配置\n3. 更新 Header.tsx 组件以包含所有主要导航链接\n4. 确保导航项目与路由表一致\n5. 实现活动链接样式\n6. 测试所有导航链接",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "抽取 Design Tokens",
            "description": "将设计标记（颜色、字体、间距）提取到全局样式文件中",
            "details": "1. 分析当前使用的颜色、字体和间距\n2. 创建 CSS 变量系统\n3. 在 globals.scss 中定义颜色变量\n4. 在 globals.scss 中定义字体变量\n5. 在 globals.scss 中定义间距变量\n6. 创建 tokens.ts 文件以在 JavaScript/TypeScript 中使用这些变量\n7. 更新现有样式以使用新的变量",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Project Page",
        "description": "Implement the Project page with project categorization, filtering, detailed data display, and UI enhancements.",
        "details": "1. Develop project categorization and filtering components to allow users to easily find projects.\n2. Display detailed project data, including tech stack, screenshots, external links, and roles.\n3. Implement a card UI with skeleton loading and hover effects for an enhanced user experience.\n4. Migrate data sources to a unified data layer for efficient data management.",
        "testStrategy": "Verify that project categorization and filtering work correctly. Check that all project details are displayed accurately. Ensure the card UI with skeleton loading and hover effects functions as expected. Confirm that data is being fetched from the unified data layer.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "项目分类与筛选组件",
            "description": "实现项目分类和筛选功能",
            "details": "1. 设计项目分类方案（如技术栈、类型、年份等）\n2. 创建分类和标签数据结构\n3. 实现筛选组件 UI\n4. 实现筛选逻辑\n5. 添加筛选状态管理\n6. 实现多选筛选功能\n7. 添加清除筛选选项",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "详情数据：技术栈、截图、外链、角色",
            "description": "丰富项目详情数据，包括技术栈、截图、外链和角色信息",
            "details": "1. 扩展项目数据模型以包含更多详细信息\n2. 为每个项目添加技术栈标签\n3. 添加项目截图和图片展示\n4. 添加外部链接（如 GitHub、演示地址）\n5. 添加项目角色和贡献信息\n6. 设计详情展示布局\n7. 实现详情页面或模态框",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "卡片 UI：Skeleton loading + Hover 动效",
            "description": "优化项目卡片 UI，添加骨架屏加载和悬停效果",
            "details": "1. 设计改进的项目卡片 UI\n2. 实现骨架屏加载效果\n3. 添加卡片悬停动画\n4. 优化卡片内容布局\n5. 添加标签和图标\n6. 确保响应式设计\n7. 优化加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "数据来源迁移至统一数据层",
            "description": "将项目数据迁移到统一的数据层",
            "details": "1. 设计统一的数据获取接口\n2. 创建数据服务层\n3. 实现数据缓存机制\n4. 迁移现有数据到新的数据层\n5. 更新组件以使用新的数据服务\n6. 添加错误处理和加载状态\n7. 测试数据流程",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Gallery Page",
        "description": "Implement the Gallery page with a Masonry layout, image lazy loading, lightbox preview, and optional tag filtering.",
        "details": "1. Implement a Masonry/waterfall layout for displaying images in the gallery.\n2. Implement image lazy loading to improve page load performance.\n3. Add a lightbox preview for viewing images in detail.\n4. Implement tag filtering (optional) to allow users to filter images by tag.",
        "testStrategy": "Verify that the Masonry layout is implemented correctly. Check that image lazy loading is functioning as expected. Ensure the lightbox preview works correctly. Confirm that tag filtering (if implemented) is working as expected.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Masonry / 瀑布流布局实现",
            "description": "实现 Masonry 瀑布流布局以展示图片",
            "details": "1. 研究 Masonry 布局实现方案（CSS Columns、Grid 或第三方库）\n2. 选择最适合的实现方式\n3. 设计瀑布流布局组件\n4. 处理不同尺寸图片的展示\n5. 确保响应式设计\n6. 优化布局重排性能\n7. 添加动画效果",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "图片懒加载 + Lightbox 预览",
            "description": "实现图片懒加载和 Lightbox 预览功能",
            "details": "1. 研究图片懒加载技术（Intersection Observer API）\n2. 实现图片懒加载组件\n3. 添加图片加载占位符或模糊预览\n4. 设计 Lightbox 组件\n5. 实现图片点击放大查看功能\n6. 添加图片浏览控制（上一张、下一张、关闭）\n7. 优化大图加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "分页或无限滚动",
            "description": "实现分页或无限滚动功能",
            "details": "1. 评估分页与无限滚动的优缺点\n2. 选择合适的方案\n3. 实现数据分页逻辑\n4. 设计分页控件或无限滚动触发器\n5. 处理加载状态和错误\n6. 优化滚动性能\n7. 添加滚动位置记忆功能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "标签过滤（可选）",
            "description": "实现图片标签过滤功能（可选）",
            "details": "1. 设计图片标签系统\n2. 为图片数据添加标签属性\n3. 创建标签筛选 UI 组件\n4. 实现标签筛选逻辑\n5. 添加多标签组合筛选\n6. 优化筛选性能\n7. 添加标签云或热门标签展示",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement UI Enhancements",
        "description": "Implement UI enhancements, including dark mode switching, artistic elements, and other detail improvements.",
        "details": "1. Design a dark theme color scheme.\n2. Implement a CSS variable system for easy theme switching.\n3. Add a theme switching button to allow users to switch between light and dark modes.\n4. Save the user's theme preference to local storage.\n5. Design and implement an artistic font.\n6. Add GSAP/Framer Motion animation effects to enhance the user experience.\n7. Implement interactive background effects.\n8. Optimize button hover effects.\n9. Beautify the scrollbar.\n10. Design a 404 page.\n11. Add a loading indicator.",
        "testStrategy": "Verify that the dark theme is implemented correctly. Check that the theme switching button works as expected and that the user's theme preference is saved. Ensure that the artistic font is displayed correctly. Confirm that the animation effects and interactive background effects are functioning as expected. Verify that the button hover effects, scrollbar, 404 page, and loading indicator are implemented correctly.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Dark 模式切换",
            "description": "实现网站的暗色模式",
            "details": "1. 设计暗色主题配色方案\n2. 实现 CSS 变量系统\n3. 添加主题切换按钮\n4. 保存用户主题偏好\n5. 支持系统主题自动切换（prefers-color-scheme）\n6. 确保所有组件在两种主题下都有良好的可读性\n7. 添加主题切换动画",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "加入艺术元素",
            "description": "添加艺术元素以提升网站视觉效果",
            "details": "1. 设计并实现艺术字体\n2. 添加 GSAP/Framer Motion 动画效果\n3. 实现交互式背景效果\n4. 设计独特的页面过渡动画\n5. 添加微互动效果\n6. 确保动画不影响性能\n7. 提供动画关闭选项（减少动效）",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "其他细节美化",
            "description": "完善网站细节，提升用户体验",
            "details": "1. 优化按钮 hover 效果\n2. 美化滚动条样式\n3. 设计创意 404 页面\n4. 添加加载指示器和过渡状态\n5. 优化表单和交互元素的反馈\n6. 添加页面进入和退出动画\n7. 实现平滑滚动效果",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Data Update Functionality",
        "description": "Implement data update functionality, including rich text upload and display, and multiple upload methods.",
        "details": "1. Select and integrate a rich text editor.\n2. Implement Markdown rendering.\n3. Support code highlighting and syntax formatting.\n4. Implement backend login authentication.\n5. Develop a management interface.\n6. Implement local file upload.\n7. Develop a CLI tool to support offline editing.",
        "testStrategy": "Verify that the rich text editor is integrated correctly. Check that Markdown rendering is functioning as expected. Ensure that code highlighting and syntax formatting are working correctly. Confirm that backend login authentication is secure. Verify that the management interface is user-friendly. Check that local file upload is working correctly. Ensure that the CLI tool is functioning as expected.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "实现富文本上传显示",
            "description": "实现富文本编辑和显示功能",
            "details": "1. 选择并集成富文本编辑器（如 TipTap、Editor.js）\n2. 实现 Markdown 渲染功能\n3. 支持代码高亮和语法格式化\n4. 添加图片和媒体嵌入支持\n5. 实现编辑器工具栏和格式控制\n6. 添加内容保存和自动保存功能\n7. 确保内容在不同设备上正确显示",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "多种上传方式",
            "description": "实现多种内容上传方式",
            "details": "1. 实现后台登录认证系统\n2. 开发管理界面\n3. 实现本地文件上传功能\n4. 开发 CLI 工具支持离线编辑\n5. 添加内容版本控制\n6. 实现草稿和发布工作流\n7. 添加内容审核和预览功能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Optimize Performance and SEO",
        "description": "Optimize website performance and SEO.",
        "details": "1. Implement image lazy loading.\n2. Implement code splitting and on-demand loading.\n3. Configure HTTP/2 and compression.\n4. Optimize Lighthouse performance (images, code splitting, Lighthouse >90).\n5. Implement dynamic meta tags.\n6. Add OpenGraph and Twitter Card support.\n7. Generate sitemap.xml and robots.txt.\n8. Implement structured data (JSON-LD).",
        "testStrategy": "Verify that image lazy loading and code splitting are implemented correctly. Check that HTTP/2 and compression are configured correctly. Ensure that Lighthouse performance is optimized. Confirm that dynamic meta tags, OpenGraph, and Twitter Card support are implemented correctly. Verify that sitemap.xml, robots.txt, and structured data are generated correctly.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "图片优化",
            "description": "优化图片加载性能",
            "details": "1. 实现图片懒加载\n2. 使用现代图片格式（WebP、AVIF）\n3. 配置 vite-plugin-imagemin 进行图片压缩\n4. 实现响应式图片加载\n5. 添加图片占位符和模糊预览\n6. 优化图片缓存策略\n7. 监控和优化图片加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "代码分割与按需加载",
            "description": "实现代码分割和按需加载",
            "details": "1. 使用 React.lazy 和 Suspense 实现组件懒加载\n2. 配置路由级代码分割\n3. 实现动态导入（dynamic import）\n4. 优化初始加载包大小\n5. 配置预加载策略\n6. 监控和优化代码分割效果\n7. 实现渐进式加载策略",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "HTTP/2 与压缩配置",
            "description": "配置 HTTP/2 和压缩策略",
            "details": "1. 配置 HTTP/2 服务器\n2. 设置 brotli 压缩\n3. 配置资源缓存策略\n4. 优化资源加载顺序\n5. 配置资源预加载和预连接\n6. 减少 HTTP 请求数量\n7. 监控和优化网络性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Lighthouse 性能优化",
            "description": "优化网站性能指标，达到 Lighthouse 90+ 分",
            "details": "1. 运行 Lighthouse 分析获取基准分数\n2. 优化首次内容绘制 (FCP)\n3. 优化累积布局偏移 (CLS)\n4. 优化总阻塞时间 (TBT)\n5. 优化最大内容绘制 (LCP)\n6. 修复可访问性问题\n7. 实施 SEO 最佳实践",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 5,
            "title": "SEO 优化",
            "description": "实现动态 Meta 标签和 SEO 优化",
            "details": "1. 为每个页面实现动态 Title / Description / Keywords\n2. 添加 OpenGraph 和 Twitter Card 元数据\n3. 生成 sitemap.xml 和 robots.txt\n4. 实现 JSON-LD 结构化数据\n5. 优化页面 URL 结构\n6. 添加规范链接（canonical links）\n7. 实现 RSS Feed（可选）",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-25T13:46:17.188Z",
      "updated": "2025-06-25T13:47:01.225Z",
      "description": "Tasks for phase2 context"
    }
  },
  "phase2": {
    "tasks": [
      {
        "id": 1,
        "title": "Define Website Structure and Data Models",
        "description": "Define the website's structure, data models, and design tokens.",
        "details": "1. Create a complete Sitemap/page flow diagram to visualize the website's structure.\n2. Define data models for each page using TypeScript interfaces or Prisma schema to ensure data consistency.\n3. Update the routing table (routes.ts) and top navigation (Header.tsx) to reflect the new structure.\n4. Extract design tokens (colors, fonts, spacing) into global.scss or tokens.ts for consistent styling.",
        "testStrategy": "Verify the sitemap accurately reflects the intended website structure. Check that data models are correctly defined and used across the application. Ensure the routing table and navigation are updated and functional. Confirm that design tokens are correctly extracted and applied to the website's styling.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "绘制完整 Sitemap／页面流程图",
            "description": "创建网站的完整站点地图和页面流程图，以可视化方式展示网站结构",
            "details": "1. 分析网站需求和用户流程\n2. 确定所有页面和它们之间的关系\n3. 创建站点地图图表\n4. 创建用户流程图\n5. 记录页面之间的导航路径\n<info added on 2025-06-25T14:06:50.586Z>\n网站技术栈：\n1. 前端框架：React 19\n2. 路由系统：React Router 7 (包含@react-router/node和@react-router/dev)\n3. 样式解决方案：SCSS (组件级别样式文件)\n4. 动画库：Framer Motion\n5. 图标库：React Icons\n6. 构建工具：Vite 6\n7. 代码质量工具：ESLint、Prettier、Husky和lint-staged\n8. CSS框架：部分Tailwind CSS (待确认是否完全集成)\n\n网站结构：\n1. 路由系统：React Router 7声明式路由\n2. 组件结构：Header、Footer、ProjectCard等\n3. 页面组件：主页、项目展示、图库页面\n4. 数据模型：Project和GalleryImage接口\n5. 样式系统：SCSS模块化\n\n站点地图和页面流程文档：docs/sitemap.md\n\n将基于现有文档创建更详细的站点地图可视化图表。\n</info added on 2025-06-25T14:06:50.586Z>\n<info added on 2025-06-25T14:10:20.818Z>\n已创建详细的网站地图可视化文档，保存在 tiny-room/docs/sitemap-visual.md 文件中。\n\n文档内容：\n1. 使用 Mermaid 图表可视化展示了网站结构、技术栈、数据流和用户流程\n2. 详细描述了网站的技术栈，包括核心框架、样式解决方案、增强库和开发工具\n3. 详细描述了主要导航路径和计划中的导航路径\n4. 列出了现有的数据模型（Project 和 GalleryImage 接口）\n5. 提出了计划扩展的数据模型，包括扩展现有接口和新增接口（BlogPost、User、SiteSettings）\n\n该文档提供了全面的网站结构和数据流程视图，可作为后续开发的重要参考。\n\n技术选择分析：\n- 使用 Mermaid 图表是因为它可以直接在 Markdown 文件中渲染，无需额外工具\n- 图表分成多个子图（subgraph）使结构更清晰\n- 提出的数据模型扩展基于现有模型，并考虑了未来功能的需求\n</info added on 2025-06-25T14:10:20.818Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "定义各页面数据模型",
            "description": "使用 TypeScript 接口或 Prisma schema 定义各页面所需的数据模型",
            "details": "1. 分析每个页面所需的数据结构\n2. 为项目页面创建数据模型（Project 接口）\n3. 为图库页面创建数据模型（GalleryImage 接口）\n4. 为博客页面创建数据模型（BlogPost 接口，如适用）\n5. 创建用户数据模型（User 接口，用于认证）\n6. 创建网站设置数据模型（SiteSettings 接口）\n<info added on 2025-06-25T14:15:56.620Z>\n实施过程和技术分析：\n\n1. 数据模型文档:\n   - 创建了详细的数据模型文档 `tiny-room/docs/data-model.md`，包含现有数据模型的描述、扩展后的数据模型接口定义、新增的数据模型接口定义、数据关系图（使用Mermaid）以及数据存储策略和使用指南。\n\n2. 类型定义文件:\n   - 在项目中创建了类型定义文件 `tiny-room/app/types/index.ts`，实现了 Project, GalleryImage, BlogPost, Comment, User, SiteSettings, NavItem, ContactMessage 等接口。\n\n3. 数据文件更新:\n   - 更新了 `projects.ts` 和 `gallery.ts`，添加了必要的字段。\n   - 移除了原来在 `ProjectCard.tsx` 中的接口定义，改为导入新的类型定义。\n\n4. 组件更新:\n   - 更新了 `ProjectCard.tsx` 组件，使其使用新的Project接口，并添加了新的UI元素来展示额外的数据字段，如标签和日期类别。\n\n技术栈分析：\n- 使用TypeScript接口定义数据模型，提供了类型安全和代码补全。\n- 遵循了React组件的最佳实践，将类型定义与组件实现分离。\n- 采用了模块化的方式组织类型定义，便于维护和扩展。\n- 使用了Framer Motion进行动画效果，提升用户体验。\n\n数据模型设计考虑因素：\n1. 可扩展性：通过添加可选字段，使模型可以根据需求逐步扩展。\n2. 类型安全：使用TypeScript接口确保类型检查。\n3. 关联性：通过ID引用建立模型之间的关系。\n4. 前端友好：模型设计考虑了前端展示和筛选需求。\n\n这些更改为网站的下一阶段开发奠定了坚实的基础，特别是对于项目筛选、图片标签过滤和博客功能的实现。\n</info added on 2025-06-25T14:15:56.620Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "更新路由表和顶部导航",
            "description": "更新路由表和顶部导航以反映新的网站结构",
            "details": "1. 根据站点地图更新 routes.ts 文件\n2. 添加新的路由配置\n3. 更新 Header.tsx 组件以包含所有主要导航链接\n4. 确保导航项目与路由表一致\n5. 实现活动链接样式\n6. 测试所有导航链接\n<info added on 2025-06-25T14:35:43.960Z>\n已完成路由表和顶部导航的更新工作：\n\n1. 更新了 routes.ts 文件，添加了以下新路由：\n   - projects/:id - 项目详情页\n   - about - 关于页面\n   - blog - 博客列表页\n   - blog/:slug - 博客文章详情页\n   - contact - 联系页面\n\n2. 更新了 Header.tsx 组件，添加了以下功能：\n   - 添加了所有主要导航链接（首页、项目、图库、关于、博客、联系）\n   - 实现了活动链接样式通过 getActiveClass 函数\n   - 添加了暗色模式切换功能\n\n3. 创建了新的路由组件：\n   - project-detail.tsx - 项目详情页面，显示项目的详细信息\n   - about.tsx - 关于页面，包含个人简介、技能、工作经历和教育背景\n   - blog.tsx - 博客列表页面，展示博客文章列表\n   - blog-post.tsx - 博客文章详情页面，展示单篇博客文章\n   - contact.tsx - 联系页面，包含联系表单和联系信息\n\n4. 所有导航链接都已测试，确保它们正确指向相应的页面。\n\n技术实现细节：\n- 使用 React Router 7 的 NavLink 组件实现导航链接\n- 使用 React Icons 库添加图标\n- 使用 useState 钩子管理暗色模式状态\n- 路由配置使用 React Router 7 的声明式路由配置\n</info added on 2025-06-25T14:35:43.960Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "抽取 Design Tokens",
            "description": "将设计标记（颜色、字体、间距）提取到全局样式文件中",
            "details": "1. 分析当前使用的颜色、字体和间距\n2. 创建 CSS 变量系统\n3. 在 globals.scss 中定义颜色变量\n4. 在 globals.scss 中定义字体变量\n5. 在 globals.scss 中定义间距变量\n6. 创建 tokens.ts 文件以在 JavaScript/TypeScript 中使用这些变量\n7. 更新现有样式以使用新的变量\n<info added on 2025-06-25T14:42:38.212Z>\n1. 新建 `tiny-room/app/styles/tokens.scss`，定义 CSS 变量：\n   - 颜色：`--color-primary` `--color-bg` `--color-text` `--color-surface` `--color-border`\n   - 字体：`--font-base`\n   - 间距：`--spacing-xs` … `--spacing-xl`\n   - 暗色模式：`[data-theme='dark']` 覆盖同名变量\n\n2. 更新 `global.scss`：\n   - `@import \"./tokens.scss\"` 作为第一行\n   - `$primary-color` 改为 `var(--color-primary)`，`$font-family-base` 改为 `var(--font-base)`\n   - `body` 背景/文字颜色改为 `var(--color-bg)` / `var(--color-text)`\n\n3. 更新组件样式：\n   - `header.scss`：背景、边框、文字颜色改用 `var(--color-*)`\n   - `footer.scss`：背景、边框、文字颜色改用 `var(--color-*)`\n\n4. 新建 `tokens.ts`，导出 `colors`、`spacing`、`fonts` 对象，值均为对应 `var(--token)`，供 TS/JS 代码使用。\n\n5. 在 `Header.tsx` 实现暗色模式切换：点击按钮时在 `document.documentElement` 上设置 / 移除 `data-theme=\"dark\"`。\n\n6. 手动验证：\n   - 浏览器 DevTools 查看 `:root` 变量已生效；\n   - 切换暗色模式时变量值随之改变；\n   - 页面主色、背景、文字颜色正常；\n   - 无编译 / 运行错误。\n\n至此 1.4 子任务标记为完成。\n</info added on 2025-06-25T14:42:38.212Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Project Page",
        "description": "Implement the Project page with project categorization, filtering, detailed data display, and UI enhancements.",
        "details": "1. Develop project categorization and filtering components to allow users to easily find projects.\n2. Display detailed project data, including tech stack, screenshots, external links, and roles.\n3. Implement a card UI with skeleton loading and hover effects for an enhanced user experience.\n4. Migrate data sources to a unified data layer for efficient data management.",
        "testStrategy": "Verify that project categorization and filtering work correctly. Check that all project details are displayed accurately. Ensure the card UI with skeleton loading and hover effects functions as expected. Confirm that data is being fetched from the unified data layer.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "项目分类与筛选组件",
            "description": "实现项目分类和筛选功能",
            "details": "1. 设计项目分类方案（如技术栈、类型、年份等）\n2. 创建分类和标签数据结构\n3. 实现筛选组件 UI\n4. 实现筛选逻辑\n5. 添加筛选状态管理\n6. 实现多选筛选功能\n7. 添加清除筛选选项",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "详情数据：技术栈、截图、外链、角色",
            "description": "丰富项目详情数据，包括技术栈、截图、外链和角色信息",
            "details": "1. 扩展项目数据模型以包含更多详细信息\n2. 为每个项目添加技术栈标签\n3. 添加项目截图和图片展示\n4. 添加外部链接（如 GitHub、演示地址）\n5. 添加项目角色和贡献信息\n6. 设计详情展示布局\n7. 实现详情页面或模态框",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "卡片 UI：Skeleton loading + Hover 动效",
            "description": "优化项目卡片 UI，添加骨架屏加载和悬停效果",
            "details": "1. 设计改进的项目卡片 UI\n2. 实现骨架屏加载效果\n3. 添加卡片悬停动画\n4. 优化卡片内容布局\n5. 添加标签和图标\n6. 确保响应式设计\n7. 优化加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "数据来源迁移至统一数据层",
            "description": "将项目数据迁移到统一的数据层",
            "details": "1. 设计统一的数据获取接口\n2. 创建数据服务层\n3. 实现数据缓存机制\n4. 迁移现有数据到新的数据层\n5. 更新组件以使用新的数据服务\n6. 添加错误处理和加载状态\n7. 测试数据流程",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Gallery Page",
        "description": "Implement the Gallery page with a Masonry layout, image lazy loading, lightbox preview, and optional tag filtering.",
        "details": "1. Implement a Masonry/waterfall layout for displaying images in the gallery.\n2. Implement image lazy loading to improve page load performance.\n3. Add a lightbox preview for viewing images in detail.\n4. Implement tag filtering (optional) to allow users to filter images by tag.",
        "testStrategy": "Verify that the Masonry layout is implemented correctly. Check that image lazy loading is functioning as expected. Ensure the lightbox preview works correctly. Confirm that tag filtering (if implemented) is working as expected.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Masonry / 瀑布流布局实现",
            "description": "实现 Masonry 瀑布流布局以展示图片",
            "details": "1. 研究 Masonry 布局实现方案（CSS Columns、Grid 或第三方库）\n2. 选择最适合的实现方式\n3. 设计瀑布流布局组件\n4. 处理不同尺寸图片的展示\n5. 确保响应式设计\n6. 优化布局重排性能\n7. 添加动画效果",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "图片懒加载 + Lightbox 预览",
            "description": "实现图片懒加载和 Lightbox 预览功能",
            "details": "1. 研究图片懒加载技术（Intersection Observer API）\n2. 实现图片懒加载组件\n3. 添加图片加载占位符或模糊预览\n4. 设计 Lightbox 组件\n5. 实现图片点击放大查看功能\n6. 添加图片浏览控制（上一张、下一张、关闭）\n7. 优化大图加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "分页或无限滚动",
            "description": "实现分页或无限滚动功能",
            "details": "1. 评估分页与无限滚动的优缺点\n2. 选择合适的方案\n3. 实现数据分页逻辑\n4. 设计分页控件或无限滚动触发器\n5. 处理加载状态和错误\n6. 优化滚动性能\n7. 添加滚动位置记忆功能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "标签过滤（可选）",
            "description": "实现图片标签过滤功能（可选）",
            "details": "1. 设计图片标签系统\n2. 为图片数据添加标签属性\n3. 创建标签筛选 UI 组件\n4. 实现标签筛选逻辑\n5. 添加多标签组合筛选\n6. 优化筛选性能\n7. 添加标签云或热门标签展示",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement UI Enhancements",
        "description": "Implement UI enhancements, including dark mode switching, artistic elements, and other detail improvements.",
        "details": "1. Design a dark theme color scheme.\n2. Implement a CSS variable system for easy theme switching.\n3. Add a theme switching button to allow users to switch between light and dark modes.\n4. Save the user's theme preference to local storage.\n5. Design and implement an artistic font.\n6. Add GSAP/Framer Motion animation effects to enhance the user experience.\n7. Implement interactive background effects.\n8. Optimize button hover effects.\n9. Beautify the scrollbar.\n10. Design a 404 page.\n11. Add a loading indicator.",
        "testStrategy": "Verify that the dark theme is implemented correctly. Check that the theme switching button works as expected and that the user's theme preference is saved. Ensure that the artistic font is displayed correctly. Confirm that the animation effects and interactive background effects are functioning as expected. Verify that the button hover effects, scrollbar, 404 page, and loading indicator are implemented correctly.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Dark 模式切换",
            "description": "实现网站的暗色模式",
            "details": "1. 设计暗色主题配色方案\n2. 实现 CSS 变量系统\n3. 添加主题切换按钮\n4. 保存用户主题偏好\n5. 支持系统主题自动切换（prefers-color-scheme）\n6. 确保所有组件在两种主题下都有良好的可读性\n7. 添加主题切换动画",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "加入艺术元素",
            "description": "添加艺术元素以提升网站视觉效果",
            "details": "1. 设计并实现艺术字体\n2. 添加 GSAP/Framer Motion 动画效果\n3. 实现交互式背景效果\n4. 设计独特的页面过渡动画\n5. 添加微互动效果\n6. 确保动画不影响性能\n7. 提供动画关闭选项（减少动效）",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "其他细节美化",
            "description": "完善网站细节，提升用户体验",
            "details": "1. 优化按钮 hover 效果\n2. 美化滚动条样式\n3. 设计创意 404 页面\n4. 添加加载指示器和过渡状态\n5. 优化表单和交互元素的反馈\n6. 添加页面进入和退出动画\n7. 实现平滑滚动效果",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Data Update Functionality",
        "description": "Implement data update functionality, including rich text upload and display, and multiple upload methods.",
        "details": "1. Select and integrate a rich text editor.\n2. Implement Markdown rendering.\n3. Support code highlighting and syntax formatting.\n4. Implement backend login authentication.\n5. Develop a management interface.\n6. Implement local file upload.\n7. Develop a CLI tool to support offline editing.",
        "testStrategy": "Verify that the rich text editor is integrated correctly. Check that Markdown rendering is functioning as expected. Ensure that code highlighting and syntax formatting are working correctly. Confirm that backend login authentication is secure. Verify that the management interface is user-friendly. Check that local file upload is working correctly. Ensure that the CLI tool is functioning as expected.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "实现富文本上传显示",
            "description": "实现富文本编辑和显示功能",
            "details": "1. 选择并集成富文本编辑器（如 TipTap、Editor.js）\n2. 实现 Markdown 渲染功能\n3. 支持代码高亮和语法格式化\n4. 添加图片和媒体嵌入支持\n5. 实现编辑器工具栏和格式控制\n6. 添加内容保存和自动保存功能\n7. 确保内容在不同设备上正确显示",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "多种上传方式",
            "description": "实现多种内容上传方式",
            "details": "1. 实现后台登录认证系统\n2. 开发管理界面\n3. 实现本地文件上传功能\n4. 开发 CLI 工具支持离线编辑\n5. 添加内容版本控制\n6. 实现草稿和发布工作流\n7. 添加内容审核和预览功能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Optimize Performance and SEO",
        "description": "Optimize website performance and SEO.",
        "details": "1. Implement image lazy loading.\n2. Implement code splitting and on-demand loading.\n3. Configure HTTP/2 and compression.\n4. Optimize Lighthouse performance (images, code splitting, Lighthouse >90).\n5. Implement dynamic meta tags.\n6. Add OpenGraph and Twitter Card support.\n7. Generate sitemap.xml and robots.txt.\n8. Implement structured data (JSON-LD).",
        "testStrategy": "Verify that image lazy loading and code splitting are implemented correctly. Check that HTTP/2 and compression are configured correctly. Ensure that Lighthouse performance is optimized. Confirm that dynamic meta tags, OpenGraph, and Twitter Card support are implemented correctly. Verify that sitemap.xml, robots.txt, and structured data are generated correctly.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "图片优化",
            "description": "优化图片加载性能",
            "details": "1. 实现图片懒加载\n2. 使用现代图片格式（WebP、AVIF）\n3. 配置 vite-plugin-imagemin 进行图片压缩\n4. 实现响应式图片加载\n5. 添加图片占位符和模糊预览\n6. 优化图片缓存策略\n7. 监控和优化图片加载性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "代码分割与按需加载",
            "description": "实现代码分割和按需加载",
            "details": "1. 使用 React.lazy 和 Suspense 实现组件懒加载\n2. 配置路由级代码分割\n3. 实现动态导入（dynamic import）\n4. 优化初始加载包大小\n5. 配置预加载策略\n6. 监控和优化代码分割效果\n7. 实现渐进式加载策略",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "HTTP/2 与压缩配置",
            "description": "配置 HTTP/2 和压缩策略",
            "details": "1. 配置 HTTP/2 服务器\n2. 设置 brotli 压缩\n3. 配置资源缓存策略\n4. 优化资源加载顺序\n5. 配置资源预加载和预连接\n6. 减少 HTTP 请求数量\n7. 监控和优化网络性能",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Lighthouse 性能优化",
            "description": "优化网站性能指标，达到 Lighthouse 90+ 分",
            "details": "1. 运行 Lighthouse 分析获取基准分数\n2. 优化首次内容绘制 (FCP)\n3. 优化累积布局偏移 (CLS)\n4. 优化总阻塞时间 (TBT)\n5. 优化最大内容绘制 (LCP)\n6. 修复可访问性问题\n7. 实施 SEO 最佳实践",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 5,
            "title": "SEO 优化",
            "description": "实现动态 Meta 标签和 SEO 优化",
            "details": "1. 为每个页面实现动态 Title / Description / Keywords\n2. 添加 OpenGraph 和 Twitter Card 元数据\n3. 生成 sitemap.xml 和 robots.txt\n4. 实现 JSON-LD 结构化数据\n5. 优化页面 URL 结构\n6. 添加规范链接（canonical links）\n7. 实现 RSS Feed（可选）",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-25T13:46:17.188Z",
      "updated": "2025-06-25T14:48:09.631Z",
      "description": "Tasks for phase2 context"
    }
  }
}