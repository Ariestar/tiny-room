generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("STORAGE_DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  albums        Album[]
  galleryItems  GalleryItem[]
  posts         Post[]
  projects      Project[]
  restaurants   Restaurant[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  projectUrl  String?
  repoUrl     String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  albumId     String?
  format      String?
  size        Int?
  album       Album?   @relation(fields: [albumId], references: [id])
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Album {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  items       GalleryItem[]
}

model Restaurant {
  id           String   @id @default(cuid())
  name         String
  address      String
  rating       Float?
  priceRange   String?
  description  String?
  tags         String[]
  phone        String?
  openingHours String?
  website      String?
  visitStatus  String   @default("未去")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  authorId     String
  coordinates  Float[]
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
